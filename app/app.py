from geopandas import GeoDataFrame, points_from_xy
from plotly.graph_objects import Scattermapbox
from shapely import Polygon
from shapely.geometry import Point


import datetime
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import plotly.express as px
import requests
import streamlit as st



# >>>>> USER INTERFACE <<<<<
# Header
st.markdown("""### Bike Sharing Demand 🚲
##### Predicting the Number of Rentals:
""")


# UI date
picked_date = st.date_input(
    "Pick Date 🗓️ : ",
    datetime.date(2023, 6, 17))

# UI time
picked_time = st.slider('Pick Time ⌛️ :', 0, 23, 12)



# >>>>> API REQUESTS <<<<<

# GET Requests > /polygons
url_poly = 'http://localhost:8000/polygons'
response_poly = requests.get(url_poly).json()

### ADD 'Pasing-Obermenzing' Polygon ###
response_poly['Pasing-Obermenzing'] = [[11.4329268,48.1630326],[11.4368277,48.1608986],[11.4372514,48.1606678],[11.437902,48.1603371],[11.4385404,48.1600113],[11.4391071,48.1596975],[11.4396657,48.1593822],[11.4403872,48.158955],[11.4410792,48.1585265],[11.4419838,48.1579311],[11.4428438,48.1573329],[11.4428304,48.1573185],[11.4429329,48.1572414],[11.4437963,48.1566227],[11.4446841,48.1560009],[11.4455746,48.155389],[11.4460024,48.1550982],[11.4464726,48.1547928],[11.4476104,48.1541239],[11.4485569,48.1536819],[11.4489044,48.1535916],[11.4493498,48.1535316],[11.4500086,48.1533945],[11.4505984,48.1532748],[11.4511715,48.1531492],[11.4516263,48.1530259],[11.4524364,48.1528713],[11.4524502,48.1528838],[11.4535582,48.1526682],[11.4534174,48.1522025],[11.4532736,48.1516928],[11.4520092,48.1516438],[11.451676,48.151604],[11.4515358,48.1515668],[11.4511727,48.1515552],[11.4497003,48.15126],[11.4489596,48.1511025],[11.4482313,48.1509396],[11.4475682,48.1507361],[11.4471745,48.1506014],[11.4470357,48.150554],[11.4465831,48.1503741],[11.4460242,48.1501164],[11.4458023,48.1500068],[11.4455894,48.1498885],[11.4451347,48.1496248],[11.4450791,48.1495935],[11.4449543,48.1495093],[11.4446197,48.1492843],[11.4442562,48.1490054],[11.4440887,48.1488718],[11.4438426,48.1486459],[11.4439157,48.1486356],[11.4435918,48.1482728],[11.443383,48.1479966],[11.4428207,48.1472473],[11.4427536,48.1472657],[11.4423726,48.1466822],[11.4423578,48.1467098],[11.4417762,48.1457458],[11.4416619,48.1455212],[11.4416371,48.1455167],[11.4415211,48.1453216],[11.4414924,48.145228],[11.4398494,48.1425426],[11.4392539,48.1415619],[11.4392348,48.1415948],[11.4387021,48.1407327],[11.4381835,48.1398668],[11.4382394,48.139699],[11.437759,48.1389211],[11.4375046,48.1385068],[11.4363741,48.1366581],[11.4372746,48.1361325],[11.4385662,48.135373],[11.4381438,48.1349579],[11.4381431,48.1348153],[11.4381326,48.1346137],[11.438724,48.1345789],[11.4398061,48.1344292],[11.4401533,48.1344226],[11.441179,48.1342489],[11.4416992,48.1340952],[11.4420712,48.1339819],[11.4421701,48.1339475],[11.44229,48.1339226],[11.4425601,48.1339596],[11.4433138,48.1339871],[11.4436935,48.1340163],[11.4442603,48.1340583],[11.4445464,48.1340705],[11.4450237,48.1340895],[11.4453251,48.1340119],[11.4458291,48.133886],[11.4460294,48.1338349],[11.4473328,48.1334886],[11.4474667,48.1335873],[11.4476451,48.1334827],[11.4474367,48.1334552],[11.4472234,48.1332891],[11.447122,48.133176],[11.4470868,48.1331878],[11.447041,48.1330838],[11.4470728,48.1329939],[11.4471803,48.1328884],[11.4472995,48.1326664],[11.4473148,48.1324751],[11.4474504,48.1322639],[11.4476122,48.1321605],[11.4476998,48.1320091],[11.4478952,48.1318922],[11.4479757,48.1317725],[11.4478869,48.131542],[11.4481179,48.1311538],[11.448232,48.1312277],[11.4483293,48.1311981],[11.4484068,48.1313419],[11.4485028,48.1314956],[11.4485404,48.1315543],[11.4486664,48.1315967],[11.4487755,48.1318021],[11.4489221,48.1319639],[11.4491144,48.1321814],[11.4494415,48.1325469],[11.449557,48.1326763],[11.4497754,48.1329213],[11.4499966,48.1328512],[11.4506439,48.1326431],[11.4511498,48.1324851],[11.4512818,48.1329293],[11.4513433,48.1332103],[11.4513653,48.1332754],[11.4514821,48.1332564],[11.451594,48.1332539],[11.4517803,48.1332496],[11.4524215,48.1332041],[11.4533677,48.1331361],[11.4543084,48.1330459],[11.4548798,48.1329687],[11.4547816,48.1328338],[11.4547291,48.1327351],[11.4547026,48.1326279],[11.4553543,48.1325296],[11.4566016,48.1324016],[11.4573883,48.1323157],[11.4578446,48.1322561],[11.4578847,48.1324797],[11.4601384,48.1320449],[11.4598671,48.1315228],[11.4596867,48.1312212],[11.4594724,48.1308994],[11.4600378,48.1307216],[11.4606152,48.1305997],[11.4615952,48.1303927],[11.4621018,48.1302968],[11.4620216,48.1300002],[11.4623934,48.1299342],[11.4634317,48.1299203],[11.4636931,48.129926],[11.4637414,48.1298418],[11.4637916,48.1294828],[11.4639766,48.1294024],[11.4641672,48.1293386],[11.4645429,48.129238],[11.4647241,48.1288863],[11.4649053,48.1284188],[11.4649715,48.1282282],[11.4655907,48.1282756],[11.4664318,48.1283909],[11.4669693,48.1284854],[11.4677458,48.1286487],[11.4685927,48.1288277],[11.4685705,48.1289136],[11.4691183,48.1288875],[11.469668,48.1288604],[11.4696651,48.1289449],[11.4699493,48.1289769],[11.4705396,48.1290527],[11.4712436,48.1291482],[11.4716905,48.1292139],[11.4726012,48.1293601],[11.4730181,48.1294152],[11.4729127,48.1295031],[11.4730248,48.1295641],[11.4739049,48.1300644],[11.476652,48.1305786],[11.477254,48.1306968],[11.477895,48.1308367],[11.4782724,48.1300755],[11.4786577,48.1293154],[11.4807944,48.129737],[11.4819799,48.129976],[11.4829761,48.1301192],[11.4828779,48.1305147],[11.4827631,48.1311544],[11.4827704,48.131668],[11.4828771,48.1321852],[11.4829815,48.132479],[11.4832111,48.1331143],[11.4834936,48.1337326],[11.4836389,48.1340303],[11.4837891,48.1343248],[11.4841087,48.1349487],[11.4844248,48.1355685],[11.484627,48.1359639],[11.4847275,48.136136],[11.4850415,48.1366609],[11.485211,48.1369215],[11.4852842,48.1370393],[11.4857148,48.1377807],[11.4861604,48.1384366],[11.4862932,48.1386359],[11.486653,48.1390569],[11.4873927,48.1396903],[11.4875715,48.1398739],[11.4878082,48.1401399],[11.4880405,48.1404631],[11.4881857,48.1407359],[11.4884629,48.1413089],[11.4888185,48.1420644],[11.489386,48.1436024],[11.4896205,48.144236],[11.4894702,48.1442578],[11.4894216,48.1446195],[11.4884691,48.1447048],[11.4886144,48.1454142],[11.4888031,48.1460221],[11.4892234,48.1473789],[11.488962,48.1474954],[11.4885048,48.1477422],[11.4879794,48.1480652],[11.4873283,48.1485274],[11.4871545,48.1486775],[11.486752,48.149025],[11.4865424,48.1491921],[11.485801,48.1498271],[11.4850844,48.150467],[11.4842648,48.1512565],[11.4841056,48.1514383],[11.4838385,48.1517806],[11.4835541,48.1521522],[11.4832868,48.152523],[11.4830486,48.1528641],[11.4828295,48.1531859],[11.482679,48.1534372],[11.4825333,48.1537089],[11.4822904,48.1542344],[11.4821987,48.1544259],[11.4820741,48.1547494],[11.4817994,48.1554556],[11.4817661,48.1554514],[11.4817313,48.1555583],[11.4817306,48.1555704],[11.4817897,48.1555725],[11.4818288,48.1555995],[11.4818356,48.1556394],[11.481755,48.155903],[11.4815896,48.1563234],[11.4815237,48.1565025],[11.4814587,48.1567491],[11.4814109,48.156928],[11.4813081,48.1574145],[11.4812644,48.1576153],[11.4812609,48.157928],[11.4812505,48.1583046],[11.4812984,48.1588837],[11.4813899,48.1593472],[11.4815268,48.1598399],[11.4816866,48.1602561],[11.4817628,48.1604127],[11.482044,48.1609781],[11.4823714,48.1615056],[11.4826371,48.1618601],[11.482993,48.1622741],[11.4833941,48.1626848],[11.4837485,48.1625688],[11.4842117,48.1624816],[11.4848305,48.1623782],[11.4849936,48.1623543],[11.4853027,48.1623219],[11.485626,48.1623043],[11.4859326,48.1623007],[11.486183,48.1623079],[11.4864198,48.1623281],[11.4868339,48.162383],[11.4871176,48.1624297],[11.4874389,48.1625094],[11.4878374,48.162625],[11.488102,48.162722],[11.4883088,48.1628132],[11.488417,48.1628725],[11.4888751,48.1627437],[11.4891975,48.1631884],[11.4897519,48.1639571],[11.4897372,48.1639775],[11.4897391,48.163993],[11.489758,48.1640033],[11.4897708,48.1640042],[11.4897922,48.163998],[11.4905869,48.1644505],[11.490991,48.1646805],[11.4914744,48.1649536],[11.4917385,48.1651039],[11.4917271,48.1651867],[11.4918252,48.1651933],[11.4918287,48.165235],[11.4920034,48.1652882],[11.4917641,48.1655516],[11.4917333,48.1656529],[11.4916411,48.166644],[11.4915416,48.1676335],[11.4911322,48.1676817],[11.4907366,48.1677389],[11.4910919,48.1679603],[11.4908152,48.1681659],[11.4912959,48.168465],[11.490795,48.1689158],[11.4909445,48.1690021],[11.4905983,48.1698165],[11.4904398,48.1705299],[11.4904662,48.1709909],[11.4904551,48.1712775],[11.4904337,48.1716109],[11.4903719,48.1721199],[11.490211,48.1725308],[11.4901697,48.172565],[11.4896442,48.1724919],[11.4890319,48.1724027],[11.4885941,48.1723325],[11.4884341,48.1723302],[11.4882774,48.1724782],[11.4875497,48.1724627],[11.4868044,48.1724452],[11.4855706,48.1724181],[11.4852426,48.1724119],[11.4846873,48.1723753],[11.4841272,48.1722701],[11.4836843,48.1721352],[11.4831443,48.1717581],[11.482656,48.1714202],[11.4822497,48.1711367],[11.4821658,48.1710766],[11.481866,48.1708525],[11.4812573,48.1713018],[11.4808905,48.1715719],[11.4804783,48.171838],[11.4793591,48.1724257],[11.4785651,48.1729512],[11.4780363,48.1732988],[11.4777532,48.1734878],[11.4774929,48.1736865],[11.4773937,48.1737632],[11.4772266,48.1738904],[11.4770366,48.1740288],[11.4764613,48.1744463],[11.4761516,48.1746708],[11.4757129,48.1749888],[11.4749642,48.1755351],[11.4746755,48.1757429],[11.4745177,48.1757105],[11.473448,48.1760101],[11.4726797,48.1762234],[11.4724368,48.1763396],[11.4719226,48.1765744],[11.4703928,48.1762162],[11.4694294,48.1759906],[11.4674816,48.1755298],[11.466516,48.1753045],[11.4658156,48.1751339],[11.4656758,48.1748448],[11.4655085,48.1745678],[11.4646109,48.1744589],[11.4641044,48.1744261],[11.4641032,48.1745144],[11.4639632,48.1745237],[11.4634797,48.1746702],[11.4632363,48.1747227],[11.4631883,48.1747968],[11.4623854,48.1746744],[11.4621365,48.1746418],[11.4616115,48.174576],[11.4606704,48.1744865],[11.4605426,48.1744827],[11.4605247,48.1747692],[11.4605306,48.1749069],[11.4607202,48.1755304],[11.4607898,48.1760027],[11.4607469,48.1765221],[11.4602443,48.1763808],[11.4597474,48.1762332],[11.4588888,48.1759803],[11.4585602,48.1758916],[11.4582373,48.1758102],[11.4567584,48.1754285],[11.4543139,48.1749378],[11.4542589,48.174959],[11.4532746,48.1747755],[11.4529001,48.174719],[11.4525631,48.1746677],[11.4521321,48.1745906],[11.4517799,48.1744839],[11.451376,48.1743735],[11.4498214,48.1740399],[11.4487718,48.1738409],[11.4485228,48.173787],[11.4478987,48.1743144],[11.44752,48.1745769],[11.4468956,48.1749329],[11.4466933,48.1750156],[11.446209,48.1752226],[11.4459315,48.1753089],[11.4454708,48.1754515],[11.4444501,48.1756483],[11.4441041,48.1756747],[11.4436816,48.1757091],[11.4432292,48.1757042],[11.4427873,48.1756505],[11.4423541,48.1755271],[11.4418876,48.1753981],[11.4412492,48.1751899],[11.4405621,48.1749729],[11.4398454,48.1748229],[11.4389884,48.1747844],[11.4375406,48.1747171],[11.4377003,48.1741673],[11.437792,48.1739292],[11.4378834,48.173772],[11.4379805,48.1736251],[11.4380457,48.1735636],[11.4382762,48.1734176],[11.4388548,48.1730661],[11.4391057,48.1728703],[11.4393351,48.1725481],[11.4394494,48.1723173],[11.4381757,48.1714458],[11.4381368,48.1713849],[11.4381315,48.1713036],[11.438173,48.1712396],[11.4401424,48.1699501],[11.4401495,48.1699271],[11.4400972,48.1699199],[11.4401498,48.1698663],[11.4401887,48.1698184],[11.4403769,48.1694663],[11.4399983,48.1691364],[11.4396134,48.1688162],[11.4384708,48.1680926],[11.4378981,48.1677643],[11.4374287,48.1674951],[11.4369624,48.1671694],[11.4366449,48.1669513],[11.4363927,48.1667496],[11.4361668,48.1665492],[11.4359361,48.1663542],[11.4357329,48.1661834],[11.4354225,48.1659842],[11.4351368,48.1657786],[11.4349568,48.1655928],[11.4346399,48.1652043],[11.4343013,48.1647374],[11.4341554,48.1645746],[11.4340109,48.1644582],[11.4338775,48.1643734],[11.4338028,48.1642596],[11.4337876,48.1641256],[11.4337724,48.164099],[11.4339298,48.1637622],[11.4338185,48.1637047],[11.4335831,48.1635383],[11.4332452,48.1632968],[11.4330313,48.1631112],[11.4329268,48.1630326]]
### END OR ADD 'Pasing-Obermenzing' Polygon ###


districts = list(response_poly.keys())
district_polys = pd.DataFrame(index=districts)

# Function-converter coords to polygons
def get_polygons(coords):
    polygon = Polygon(coords)
    return polygon


# Mapping coordingates with districts
district_polys['geo_polygon'] = district_polys.index.map(response_poly)

# Convert coordinates to polygons
district_polys['geo_polygon'] = district_polys['geo_polygon'].apply(get_polygons)


# GET Requests > /base_predict
url = 'http://127.0.0.1:8000/base_predict'
params = {'date': picked_date}
response = requests.get(url, params=params).json()

### ADD 'Pasing-Obermenzing' Prediction ###
response['Pasing-Obermenzing'] = [0, 0, 0, 0, 0, 0, 0, 2, 4, 2, 1, 1, 1, 2, 1, 3, 4, 2, 1, 6, 3, 2, 3, 0]
### END ADD 'Pasing-Obermenzing' Prediction ###


# Add number of rents from api (24 predictions / date / district)
district_polys['n_rents'] = district_polys.index.map(response)


# Function get rents per hour column for picked_time
def get_n_rents(picked_time, district_polys):
    district_polys['rents_per_hour'] = district_polys['n_rents'].apply(lambda x: x[picked_time])
    return district_polys

# Applying get rents for picked time
get_n_rents(picked_time, district_polys)


# Initiating GeoDataFrame
gdf = GeoDataFrame(district_polys, crs="EPSG:4326", geometry='geo_polygon')

max_rental_per_day = district_polys['n_rents'].apply(lambda x: max(x)).max()


# >>>>> MAP <<<<<
# # Plot map with polygons
# fig = px.choropleth_mapbox(gdf,
#                            geojson=gdf.geometry,
#                            locations=gdf.index,
#                            color='rents_per_hour',
#                            color_continuous_scale='thermal', #'icefire', #'twilight', #'sunset',
#                            range_color=(0, max_rental_per_day),
#                            mapbox_style="carto-positron", #"stamen-watercolor", #"stamen-toner", #"stamen-terrain", #"carto-darkmatter", #"white-bg",
#                            zoom=10,
#                            opacity=0.6,
#                            center = {"lat": 48.1451, "lon": 11.5820},
#                            height=450,
#                            labels={'rents_per_hour': 'rents / hour', 'index': 'district'}
#                            )

# # fig.show()
# # map_placeholder = st.empty()  >>> map_placeholder.plotly_chart()
# st.plotly_chart(fig, use_container_width=False, sharing="streamlit", theme="streamlit")


########### BETA ###########


# Create an empty GeoDataFrame to store the points
points_gdf = GeoDataFrame()

for index, row in gdf.iterrows():
    # Extract the polygon and rent value for the current district
    polygon = row['geo_polygon']
    rent_per_hour = row['rents_per_hour']

    # Calculate the number of points to generate based on the rent value
    num_points = int(rent_per_hour)

    # Generate random points within the polygon
    points_within_polygon = []
    min_x, min_y, max_x, max_y = polygon.bounds
    while len(points_within_polygon) < num_points:
        point_x = np.random.uniform(min_x, max_x)
        point_y = np.random.uniform(min_y, max_y)
        point = points_from_xy([point_x], [point_y], crs=gdf.crs)
        if polygon.contains(point[0]):
            points_within_polygon.append(point[0])

    # Create a temporary GeoDataFrame to store the points within the current polygon
    temp_gdf = GeoDataFrame(geometry=points_within_polygon)

    # Add the rent_per_hour column with the same value for all points within the current polygon
    temp_gdf['rents_per_hour'] = rent_per_hour

    # Append the temporary GeoDataFrame to the main points GeoDataFrame
    points_gdf = pd.concat([points_gdf, temp_gdf], ignore_index=True)




# Plot map with polygons and points
fig = px.choropleth_mapbox(gdf,
                           geojson=gdf.geometry,
                           locations=gdf.index,
                           color='rents_per_hour',
                           color_continuous_scale='thermal',
                           range_color=(0, max_rental_per_day),
                           mapbox_style="carto-positron",
                           zoom=10,
                           opacity=0.6,
                           center={"lat": 48.1451, "lon": 11.5820},
                           height=450,
                           labels={'rents_per_hour': 'rents / hour', 'index': 'district'}
                           )

# Add the randomly generated points to the map
fig.add_trace(Scattermapbox(
    lat=points_gdf.geometry.y,
    lon=points_gdf.geometry.x,
    mode='markers',
    marker=dict(
        size=5,
        color='red',
        opacity=0.8
    ),
    showlegend=False
))

# Display the map
st.plotly_chart(fig, use_container_width=False, sharing="streamlit", theme="streamlit")
